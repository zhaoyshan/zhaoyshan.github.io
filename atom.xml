<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaoyshan&#39;Blog😜</title>
  
  <subtitle>zhaoyshan&#39;Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoyshan.top/"/>
  <updated>2020-05-31T10:18:58.945Z</updated>
  <id>http://zhaoyshan.top/</id>
  
  <author>
    <name>zhaoyshan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring(IOC)</title>
    <link href="http://zhaoyshan.top/2020/05/29/spring%E6%80%BB%E7%BB%93IOC/"/>
    <id>http://zhaoyshan.top/2020/05/29/spring%E6%80%BB%E7%BB%93IOC/</id>
    <published>2020-05-29T01:20:53.000Z</published>
    <updated>2020-05-31T10:18:58.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring总结（IOC）"><a href="#spring总结（IOC）" class="headerlink" title="spring总结（IOC）"></a>spring总结（IOC）</h2><hr><h4 id="1-bean的声明周期总结："><a href="#1-bean的声明周期总结：" class="headerlink" title="1. bean的声明周期总结："></a>1. bean的声明周期总结：</h4><ol><li>容器创建</li><li>调用bean构造方法</li><li>给bean属性赋值</li><li>调用beanq前置处理器：BeanPostProcessor</li><li>调用bean 的初始化方法</li><li>调用bean后置处理器：BeanPostProcessor</li><li>bean的创建完成</li><li>器关闭，调用销毁方法</li></ol><h4 id="2-spring标签及属性："><a href="#2-spring标签及属性：" class="headerlink" title="2. spring标签及属性："></a>2. spring标签及属性：</h4><ul><li>bean：<br>  id：是唯一标识符（相当于方法名称）<br>  class：是类路径</li><li>property:<br> name：就是类中的属性 （指认set()方法）<br> value：就是属性的值</li><li>constructor-arg：<br> index就是参数的位置  （从0开始的）<br> name就是指定参数的名字<br> value就是赋值操作<br> type：就是用来指定赋值的类型 （name ，type，index可以只选一个）</li></ul><p>注意：<br>    1. 如果没有指定位置 那么默认是构造方法的顺序<br>    2. 当指定位置之后 就可以进行 其它位置的赋值 index就是用来指定位置的 索引是从0开始的<br>    3. 在实体类中一定要有对应的构造方法，而且必要要有无参构造方法<br>    4. xml文件中&lt; 和 &amp; 都是不能解析<br>       需要CDATA来解析<br>                 <![CDATA["需要赋的值"]]><br>                 <![CDATA[<Benz>]]></p><h4 id="3-引用类型赋值："><a href="#3-引用类型赋值：" class="headerlink" title="3. 引用类型赋值："></a>3. 引用类型赋值：</h4><ul><li>单个对象：<ol><li>使用ref: ref引用的 一定提前配置,连接bean中的其它类对象的赋值  也就是说ref就是配置好的id<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.entity.Person&quot;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jack&quot;&#x2F;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;22&quot;&#x2F;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;cars&quot; ref&#x3D;&quot;car&quot;&#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></li><li>也可以使用内部bean来赋值（内部bean可以不写id了  前面的value也可以不写了),内部bean不能被其它引用  只能自己使用（内部类）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;person1&quot; class&#x3D;&quot;com.zys.entity.Person&quot;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jack&quot;&#x2F;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;22&quot;&#x2F;&gt;</span><br><span class="line">          &lt;property name&#x3D;&quot;cars&quot;&gt;</span><br><span class="line">              &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt;</span><br><span class="line">                  &lt;property name&#x3D;&quot;production&quot; value&#x3D;&quot;sichuan &quot;&#x2F;&gt;</span><br><span class="line">                  &lt;property name&#x3D;&quot;name&quot;&gt;</span><br><span class="line">                      &lt;value&gt;BYD&lt;&#x2F;value&gt;</span><br><span class="line">                  &lt;&#x2F;property&gt;</span><br><span class="line">                  &lt;property name&#x3D;&quot;price&quot; value&#x3D;&quot;22&quot;&#x2F;&gt;</span><br><span class="line">              &lt;&#x2F;bean&gt;</span><br><span class="line">          &lt;&#x2F;property&gt;</span><br><span class="line">      &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>注意：如何给一个值赋值为null  （不给那个赋值就行了，不调用 默认是null的嘛）还有就是加一个null标签<code>&lt;property name=&quot;cars&quot;&gt;&lt;null/&gt;&lt;/property&gt;</code></li></ol></li><li>集合对象：list,set,map<ul><li>List：使用list标签 为list类型的属性赋值 ref中的bean也要出现在配置属性中</li><li>Set:的使用跟list是一样的  也就是讲list换成set就行了</li><li>Map:使用map标签来赋值  map是k-value的键值对   所以有一个entry标签 在它的内部有key 和value属性。如果value是引用类型的话 就用 value-ref这个属性</li></ul></li></ul><p>下面是list与map 的示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;user_list&quot; class&#x3D;&quot;com.zys.entity.User&quot;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;cars&quot;&gt;</span><br><span class="line">           &lt;list&gt;</span><br><span class="line">               &lt;ref bean&#x3D;&quot;car&quot;&#x2F;&gt;</span><br><span class="line">               &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt;</span><br><span class="line">                   &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;sichuan&quot;&#x2F;&gt;</span><br><span class="line">                   &lt;constructor-arg value&#x3D;&quot;BYD&quot;&#x2F;&gt;</span><br><span class="line">                   &lt;constructor-arg value&#x3D;&quot;22&quot;&#x2F;&gt;</span><br><span class="line">               &lt;&#x2F;bean&gt;</span><br><span class="line">           &lt;&#x2F;list&gt;</span><br><span class="line">       &lt;&#x2F;property&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;use_map&quot; class&#x3D;&quot;com.zys.entity.User&quot;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;mp&quot;&gt;</span><br><span class="line">           &lt;map&gt;</span><br><span class="line">               &lt;entry key&#x3D;&quot;heihei&quot; value-ref&#x3D;&quot;car1&quot;&#x2F;&gt;</span><br><span class="line">           &lt;&#x2F;map&gt;</span><br><span class="line">       &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>也可以将list和其它的集合封装一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;util:list id&#x3D;&quot;list&quot;&gt;</span><br><span class="line">       &lt;ref bean&#x3D;&quot;car&quot;&#x2F;&gt;</span><br><span class="line">       &lt;ref bean&#x3D;&quot;car1&quot;&#x2F;&gt;</span><br><span class="line">       &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt;</span><br><span class="line">           &lt;constructor-arg value&#x3D;&quot;sichuan&quot;&#x2F;&gt;</span><br><span class="line">           &lt;constructor-arg value&#x3D;&quot;BYD&quot;&#x2F;&gt;</span><br><span class="line">           &lt;constructor-arg value&#x3D;&quot;22&quot;&#x2F;&gt;</span><br><span class="line">       &lt;&#x2F;bean&gt;</span><br><span class="line">   &lt;&#x2F;util:list&gt;</span><br></pre></td></tr></table></figure><h4 id="4-通过spel进行赋值"><a href="#4-通过spel进行赋值" class="headerlink" title="4. 通过spel进行赋值"></a>4. 通过spel进行赋值</h4><ul><li>如果是String类型的话：就要加一个单引号</li><li>如果整型 ， 浮点型 就直接用数字表示  就行了</li><li>如果是一个实体类的话就可以直接进行调用其中的属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.spel.Person&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;car&quot; value&#x3D;&quot;#&#123;car&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;!--        &lt;property name&#x3D;&quot;city&quot; value&#x3D;&quot;#&#123;address.city&#125;&quot;&#x2F;&gt;--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;city&quot; value&#x3D;&quot;#&#123;address.city&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;info&quot; value&#x3D;&quot;#&#123;car.price &gt; 50 ? &#39;金领&#39;:&#39;白领&#39;&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;length&quot; value&#x3D;&quot;#&#123;#&#123;T(Math).PI * 80&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-bean之间的关系（依赖，抽象）"><a href="#5-bean之间的关系（依赖，抽象）" class="headerlink" title="5. bean之间的关系（依赖，抽象）"></a>5. bean之间的关系（依赖，抽象）</h4><p>bean的依赖关系：<br>   dapends-on：用来表示y一个bean A的实例化  依赖另外一个bean B的实例化，但是A并不需要持有B的对象（说白了 它不是一个赋值对象）<br>       指定某个bean初始化必须依赖于另一个bean，如果其依赖的bean不存在,则其初始化失败<br>       如果要使用多个bean 就用“，”分割<br>   ref：通常是用来给引用对象赋值，也要求赋值的对象初始化，并且还要使用初始化的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.relation.Person&quot; depends-on&#x3D;&quot;car&quot;&gt;</span><br><span class="line">             &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt;</span><br><span class="line">             &lt;property name&#x3D;&quot;address&quot; ref &#x3D; &quot;address1&quot;&#x2F;&gt;</span><br><span class="line">             &lt;property name&#x3D;&quot;car&quot; ref&#x3D;&quot;car&quot;&#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><ul><li>当加上abstract之后就不能 被实例化了 跟抽象类是一样的</li><li>parent属性 也可以是不同的类之间的赋值</li><li>Spring 允许继承 bean 的配置, 被继承的 bean 称为父 bean. 继承这个父 Bean 的 Bean 称为子 Bean</li><li>子 Bean 从父 Bean 中继承配置, 包括 Bean 的属性配置</li><li>子 Bean 也可以覆盖从父 Bean 继承过来的配置</li><li>父 Bean 可以作为配置模板, 也可以作为 Bean 实例. 若只想把父 Bean 作为模板, 可以设置 <bean> 的abstract 属性为 true,这样 Spring 将不会实例化这个 Bean</li><li>并不是 <bean> 元素里的所有属性都会被继承. 比如: autowire, abstract 等.也可以忽略父 Bean 的 class 属性, 让子 Bean 指定自己的类, 而共享相同的属性配置. 但此时 abstract 必须设为 true</li></ul><h4 id="6-bean的作用域"><a href="#6-bean的作用域" class="headerlink" title="6. bean的作用域"></a>6. bean的作用域</h4><p>通过bean的scop属性来指定</p><p>bean的作用域一点说明：</p><ol><li>可以通过bean标签中的scope属性来设置bean的作用域<ol><li>singleton 单例<ul><li>当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。</li><li>Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象</li></ul></li><li>prototype 原型<ul><li>表示一个bean定义对应多个对象实例。</li><li>Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。</li><li>Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。</li></ul></li><li>Request<ul><li>表示在一次HTTP请求中，一个bean定义对应一个实例；</li><li>即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。</li><li>该作用域仅在基于web的Spring ApplicationContext情形下有效</li></ul></li><li>Session<ul><li>表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效</li></ul></li><li>Global Session<ul><li>表示在一个全局的HTTP Session中，一个bean定义对应一个实例</li></ul></li></ol></li><li>Spring中的bean默认都是单例的 singleton<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;car&quot; class&#x3D;&quot;com.zys.scope.Car&quot; scope&#x3D;&quot;singleton&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring总结（IOC）&quot;&gt;&lt;a href=&quot;#spring总结（IOC）&quot; class=&quot;headerlink&quot; title=&quot;spring总结（IOC）&quot;&gt;&lt;/a&gt;spring总结（IOC）&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-bean的声明周期总结：&quot;&gt;
      
    
    </summary>
    
    
      <category term="spring总结(IOC)" scheme="http://Zhaoyshan.top/categories/spring%E6%80%BB%E7%BB%93-IOC/"/>
    
    
      <category term="spring" scheme="http://Zhaoyshan.top/tags/spring/"/>
    
      <category term="IOC" scheme="http://Zhaoyshan.top/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://zhaoyshan.top/2020/05/16/Hexo/"/>
    <id>http://zhaoyshan.top/2020/05/16/Hexo/</id>
    <published>2020-05-16T12:02:14.000Z</published>
    <updated>2020-05-18T03:58:00.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-根据hexo搭建博客只有三步骤："><a href="#1-根据hexo搭建博客只有三步骤：" class="headerlink" title="1.根据hexo搭建博客只有三步骤："></a>1.根据hexo搭建博客只有三步骤：</h1><hr><p>1、下载git到本地<br>2、下载Node.js<br>3、下载hexo</p><h1 id="2-详细步骤"><a href="#2-详细步骤" class="headerlink" title="2.详细步骤"></a>2.详细步骤</h1><p>（1.下载git：直接到官方网站下载安装就ok了（windows傻瓜式教程<br>注：自己还是要会一点git的一些基础操作<br>（2.下载Node.js:也是到官方网站下载安装即可<br>（3.下载hexo：<br>    3.1.在本地创建一个文件夹（用来装博客的所用东西）<br>    3.2进入文件夹右键，在右键列表中点击git bush 进入git<br>    3.3下载hexo<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><br>    3.4初始化<br>        <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><br>hexo会自动下载一些相关的文件<br>注意：如果不能识别hexo命令将下面的路径加入环境变量中<br>C:\Users\user\AppData\Roaming\npm\node_modules\hexo-cli\bin    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo g #生成</span><br><span class="line">$hexo server #启动服务</span><br></pre></td></tr></table></figure><p>到这步的时候，自己的博客就已经搭建完成了。在网址中输入<code>localhost:4000</code>出现页面就表示成功了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-根据hexo搭建博客只有三步骤：&quot;&gt;&lt;a href=&quot;#1-根据hexo搭建博客只有三步骤：&quot; class=&quot;headerlink&quot; title=&quot;1.根据hexo搭建博客只有三步骤：&quot;&gt;&lt;/a&gt;1.根据hexo搭建博客只有三步骤：&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;1
      
    
    </summary>
    
    
      <category term="搭建博客" scheme="http://Zhaoyshan.top/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://Zhaoyshan.top/tags/hexo/"/>
    
      <category term="matery" scheme="http://Zhaoyshan.top/tags/matery/"/>
    
  </entry>
  
  <entry>
    <title>自律、冷静</title>
    <link href="http://zhaoyshan.top/2020/05/12/hello-world/"/>
    <id>http://zhaoyshan.top/2020/05/12/hello-world/</id>
    <published>2020-05-12T11:46:42.429Z</published>
    <updated>2020-05-18T03:55:35.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="现在-你不努力让自己过上想要的生活-那你以后-就会用大把的时间-去应付自己不想要的生活。"><a href="#现在-你不努力让自己过上想要的生活-那你以后-就会用大把的时间-去应付自己不想要的生活。" class="headerlink" title="现在,你不努力让自己过上想要的生活,那你以后,就会用大把的时间,去应付自己不想要的生活。"></a>现在,你不努力让自己过上想要的生活,那你以后,就会用大把的时间,去应付自己不想要的生活。</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;现在-你不努力让自己过上想要的生活-那你以后-就会用大把的时间-去应付自己不想要的生活。&quot;&gt;&lt;a href=&quot;#现在-你不努力让自己过上想要的生活-那你以后-就会用大把的时间-去应付自己不想要的生活。&quot; class=&quot;headerlink&quot; title=&quot;现在,你
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
