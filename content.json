[{"title":"spring(IOC)","date":"2020-05-29T01:20:53.000Z","path":"2020/05/29/spring总结IOC/","text":"spring总结（IOC） 1. bean的声明周期总结： 容器创建 调用bean构造方法 给bean属性赋值 调用beanq前置处理器：BeanPostProcessor 调用bean 的初始化方法 调用bean后置处理器：BeanPostProcessor bean的创建完成 器关闭，调用销毁方法 2. spring标签及属性： bean： id：是唯一标识符（相当于方法名称） class：是类路径 property: name：就是类中的属性 （指认set()方法） value：就是属性的值 constructor-arg： index就是参数的位置 （从0开始的） name就是指定参数的名字 value就是赋值操作 type：就是用来指定赋值的类型 （name ，type，index可以只选一个） 注意： 1. 如果没有指定位置 那么默认是构造方法的顺序 2. 当指定位置之后 就可以进行 其它位置的赋值 index就是用来指定位置的 索引是从0开始的 3. 在实体类中一定要有对应的构造方法，而且必要要有无参构造方法 4. xml文件中&lt; 和 &amp; 都是不能解析 需要CDATA来解析 3. 引用类型赋值： 单个对象： 使用ref: ref引用的 一定提前配置,连接bean中的其它类对象的赋值 也就是说ref就是配置好的id12345&lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.entity.Person&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;22&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;cars&quot; ref&#x3D;&quot;car&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; 也可以使用内部bean来赋值（内部bean可以不写id了 前面的value也可以不写了),内部bean不能被其它引用 只能自己使用（内部类）12345678910111213&lt;bean id&#x3D;&quot;person1&quot; class&#x3D;&quot;com.zys.entity.Person&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;22&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;cars&quot;&gt; &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt; &lt;property name&#x3D;&quot;production&quot; value&#x3D;&quot;sichuan &quot;&#x2F;&gt; &lt;property name&#x3D;&quot;name&quot;&gt; &lt;value&gt;BYD&lt;&#x2F;value&gt; &lt;&#x2F;property&gt; &lt;property name&#x3D;&quot;price&quot; value&#x3D;&quot;22&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;&#x2F;property&gt; &lt;&#x2F;bean&gt; 注意：如何给一个值赋值为null （不给那个赋值就行了，不调用 默认是null的嘛）还有就是加一个null标签&lt;property name=&quot;cars&quot;&gt;&lt;null/&gt;&lt;/property&gt; 集合对象：list,set,map List：使用list标签 为list类型的属性赋值 ref中的bean也要出现在配置属性中 Set:的使用跟list是一样的 也就是讲list换成set就行了 Map:使用map标签来赋值 map是k-value的键值对 所以有一个entry标签 在它的内部有key 和value属性。如果value是引用类型的话 就用 value-ref这个属性 下面是list与map 的示例 123456789101112131415161718192021&lt;bean id&#x3D;&quot;user_list&quot; class&#x3D;&quot;com.zys.entity.User&quot;&gt; &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;cars&quot;&gt; &lt;list&gt; &lt;ref bean&#x3D;&quot;car&quot;&#x2F;&gt; &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt; &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;sichuan&quot;&#x2F;&gt; &lt;constructor-arg value&#x3D;&quot;BYD&quot;&#x2F;&gt; &lt;constructor-arg value&#x3D;&quot;22&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;&#x2F;list&gt; &lt;&#x2F;property&gt; &lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;use_map&quot; class&#x3D;&quot;com.zys.entity.User&quot;&gt; &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;mp&quot;&gt; &lt;map&gt; &lt;entry key&#x3D;&quot;heihei&quot; value-ref&#x3D;&quot;car1&quot;&#x2F;&gt; &lt;&#x2F;map&gt; &lt;&#x2F;property&gt;&lt;&#x2F;bean&gt; 也可以将list和其它的集合封装一下 123456789&lt;util:list id&#x3D;&quot;list&quot;&gt; &lt;ref bean&#x3D;&quot;car&quot;&#x2F;&gt; &lt;ref bean&#x3D;&quot;car1&quot;&#x2F;&gt; &lt;bean class&#x3D;&quot;com.zys.entity.Car&quot;&gt; &lt;constructor-arg value&#x3D;&quot;sichuan&quot;&#x2F;&gt; &lt;constructor-arg value&#x3D;&quot;BYD&quot;&#x2F;&gt; &lt;constructor-arg value&#x3D;&quot;22&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; &lt;&#x2F;util:list&gt; 4. 通过spel进行赋值 如果是String类型的话：就要加一个单引号 如果整型 ， 浮点型 就直接用数字表示 就行了 如果是一个实体类的话就可以直接进行调用其中的属性12345678 &lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.spel.Person&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;car&quot; value&#x3D;&quot;#&#123;car&#125;&quot;&#x2F;&gt;&lt;!-- &lt;property name&#x3D;&quot;city&quot; value&#x3D;&quot;#&#123;address.city&#125;&quot;&#x2F;&gt;--&gt; &lt;property name&#x3D;&quot;city&quot; value&#x3D;&quot;#&#123;address.city&#125;&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;info&quot; value&#x3D;&quot;#&#123;car.price &gt; 50 ? &#39;金领&#39;:&#39;白领&#39;&#125;&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;length&quot; value&#x3D;&quot;#&#123;#&#123;T(Math).PI * 80&#125;&#125;&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; 5. bean之间的关系（依赖，抽象）bean的依赖关系： dapends-on：用来表示y一个bean A的实例化 依赖另外一个bean B的实例化，但是A并不需要持有B的对象（说白了 它不是一个赋值对象） 指定某个bean初始化必须依赖于另一个bean，如果其依赖的bean不存在,则其初始化失败 如果要使用多个bean 就用“，”分割 ref：通常是用来给引用对象赋值，也要求赋值的对象初始化，并且还要使用初始化的对象 12345&lt;bean id&#x3D;&quot;person&quot; class&#x3D;&quot;com.zys.relation.Person&quot; depends-on&#x3D;&quot;car&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;Jack&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;address&quot; ref &#x3D; &quot;address1&quot;&#x2F;&gt; &lt;property name&#x3D;&quot;car&quot; ref&#x3D;&quot;car&quot;&#x2F;&gt; &lt;&#x2F;bean&gt; 当加上abstract之后就不能 被实例化了 跟抽象类是一样的 parent属性 也可以是不同的类之间的赋值 Spring 允许继承 bean 的配置, 被继承的 bean 称为父 bean. 继承这个父 Bean 的 Bean 称为子 Bean 子 Bean 从父 Bean 中继承配置, 包括 Bean 的属性配置 子 Bean 也可以覆盖从父 Bean 继承过来的配置 父 Bean 可以作为配置模板, 也可以作为 Bean 实例. 若只想把父 Bean 作为模板, 可以设置 的abstract 属性为 true,这样 Spring 将不会实例化这个 Bean 并不是 元素里的所有属性都会被继承. 比如: autowire, abstract 等.也可以忽略父 Bean 的 class 属性, 让子 Bean 指定自己的类, 而共享相同的属性配置. 但此时 abstract 必须设为 true 6. bean的作用域通过bean的scop属性来指定 bean的作用域一点说明： 可以通过bean标签中的scope属性来设置bean的作用域 singleton 单例 当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。 Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象 prototype 原型 表示一个bean定义对应多个对象实例。 Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。 Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。 Request 表示在一次HTTP请求中，一个bean定义对应一个实例； 即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。 该作用域仅在基于web的Spring ApplicationContext情形下有效 Session 表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效 Global Session 表示在一个全局的HTTP Session中，一个bean定义对应一个实例 Spring中的bean默认都是单例的 singleton1&lt;bean id&#x3D;&quot;car&quot; class&#x3D;&quot;com.zys.scope.Car&quot; scope&#x3D;&quot;singleton&#x2F;&gt;","categories":[{"name":"spring总结(IOC)","slug":"spring总结-IOC","permalink":"http://zhaoyshan.top/categories/spring%E6%80%BB%E7%BB%93-IOC/"}],"tags":[{"name":"spring","slug":"spring","permalink":"http://zhaoyshan.top/tags/spring/"},{"name":"IOC","slug":"IOC","permalink":"http://zhaoyshan.top/tags/IOC/"}]},{"title":"Hexo","date":"2020-05-16T12:02:14.000Z","path":"2020/05/16/Hexo/","text":"1.根据hexo搭建博客只有三步骤： 1、下载git到本地2、下载Node.js3、下载hexo 2.详细步骤（1.下载git：直接到官方网站下载安装就ok了（windows傻瓜式教程注：自己还是要会一点git的一些基础操作（2.下载Node.js:也是到官方网站下载安装即可（3.下载hexo： 3.1.在本地创建一个文件夹（用来装博客的所用东西） 3.2进入文件夹右键，在右键列表中点击git bush 进入git 3.3下载hexo 1npm install -g hexo 3.4初始化 1hexo inithexo会自动下载一些相关的文件注意：如果不能识别hexo命令将下面的路径加入环境变量中C:\\Users\\user\\AppData\\Roaming\\npm\\node_modules\\hexo-cli\\bin 12$hexo g #生成$hexo server #启动服务 到这步的时候，自己的博客就已经搭建完成了。在网址中输入localhost:4000出现页面就表示成功了","categories":[{"name":"搭建博客","slug":"搭建博客","permalink":"http://zhaoyshan.top/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://zhaoyshan.top/tags/hexo/"},{"name":"matery","slug":"matery","permalink":"http://zhaoyshan.top/tags/matery/"}]},{"title":"自律、冷静","date":"2020-05-12T11:46:42.429Z","path":"2020/05/12/hello-world/","text":"现在,你不努力让自己过上想要的生活,那你以后,就会用大把的时间,去应付自己不想要的生活。","categories":[],"tags":[]}]